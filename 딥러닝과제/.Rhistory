## 1.케라스에서 imdb 영화 리뷰 다운받기 (training 25000, test 25000)
library(keras)
imdb <- dataset_imdb(num_words = 10000) #top 10000 most frequently occurring words(discard rare words)
###_data 리스트에는 각 element에 정수들의 리스트가 저장되어있는데, 이 정수들은 각 단어의 빈도순위를 나타냄
### 즉, 예를 들어 train_data[[1]] = int [1:218] 1 14 22 16 ... 이렇게 저장된 정수들은 각 리뷰에서 단어가 얼마나 등장했는지 빈도순위임
### 그래서 num_words = 10000은 10000위 밖의 단어(즉, 자주 쓰이지 않는 단어)들을 버리는 키워드임
c(c(train_data, train_labels), c(test_data, test_labels)) %<-% imdb #_data: list of reviews; _labels: list of 0(negative) and 1(positive)
## 1-1. 정수(빈도순위)로 표시된 단어를 다시 영어 단어로 되돌리기
word_index <- dataset_imdb_word_index()
reverse_word_index <- names(word_index)
decoded_review <- sapply(train_data[[1]], function(index){ ## train_data의 첫번째 자료만 decode한거임
word <- if (index > 3) reverse_word_index[[index - 3]]
if (!is.null(word)) word else "?"
})
## 2. preparing the data - turn the lists into tensors
### 방법: One-hot-encoding: turn the lists into vectors of 0s and 1s.
vectorize_sequences <- function(sequences, dimension = 10000) {
# Create an all-zero matrix of shape (len(sequences), dimension)
results <- matrix(0, nrow = length(sequences), ncol = dimension)
for (i in 1:length(sequences))
# sets specific indices of results[i] to 1s
valid_indices <- sequences[[i]][sequences[[i]] > 2]
results[i, valid_indices] <- 1
results
}
x_train <- vectorize_sequences(train_data)
x_test <- vectorize_sequences(test_data)
str(x_train[1,])
## 2. preparing the data - turn the lists into tensors
### 방법: One-hot-encoding: turn the lists into vectors of 0s and 1s.
vectorize_sequences <- function(sequences, dimension = 10000) {
# Create an all-zero matrix of shape (len(sequences), dimension)
results <- matrix(0, nrow = length(sequences), ncol = dimension)
for (i in 1:length(sequences)) {
# sets specific indices of results[i] to 1s
valid_indices <- sequences[[i]][sequences[[i]] > 2]
results[i, valid_indices] <- 1
}
results
}
x_train <- vectorize_sequences(train_data)
x_test <- vectorize_sequences(test_data)
str(x_train[1,])
## 3-1. Build a network (relu, sigmoid)
model_sigmoid <- keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = c(10000)) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dense(units = 1, activation = "sigmoid")
### configure model with the rmsprop optimizer, loss function: binary_crossentropy, monitor accuracy during training
model_sigmoid %>% compile(
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("accuracy")
)
### Making validation set (총 25000행에서 1~10000행 뜯어냄)
val_indices <- 1:10000
x_val <- x_train[val_indices,]
partial_x_train <- x_train[-val_indices,]
y_val <- y_train[val_indices,]
### Vectorizing labels
y_train <- as.numeric(train_labels)
y_test <- as.numeric(test_labels)
y_val <- y_train[val_indices,]
y_val <- y_train[val_indices]
partial_y_train <- y_train[-val_indices]
### epoch = 20, batch size = 512로 train하기 (loss monitoring 함)
model_sigmoid %>% fit(x_train, y_train, epochs = 20, batch_size = 512)
### epoch = 20, batch size = 512로 train하기 (loss monitoring 함)
model_sigmoid %>% fit(x_train, y_train, epochs = 20, batch_size = 512, validation_data = (x_val, y_val))
### epoch = 20, batch size = 512로 train하기 (loss monitoring 함)
model_sigmoid %>% fit(x_train, y_train, epochs = 20, batch_size = 512, validation_data = list(x_val, y_val))
## 1.케라스에서 imdb 영화 리뷰 다운받기 (training 25000, test 25000)
library(keras)
imdb <- dataset_imdb(num_words = 10000) #top 10000 most frequently occurring words(discard rare words)
###_data 리스트에는 각 element에 정수들의 리스트가 저장되어있는데, 이 정수들은 각 단어의 빈도순위를 나타냄
### 즉, 예를 들어 train_data[[1]] = int [1:218] 1 14 22 16 ... 이렇게 저장된 정수들은 각 리뷰에서 단어가 얼마나 등장했는지 빈도순위임
### 그래서 num_words = 10000은 10000위 밖의 단어(즉, 자주 쓰이지 않는 단어)들을 버리는 키워드임
c(c(train_data, train_labels), c(test_data, test_labels)) %<-% imdb #_data: list of reviews; _labels: list of 0(negative) and 1(positive)
## 1-1. 정수(빈도순위)로 표시된 단어를 다시 영어 단어로 되돌리기
word_index <- dataset_imdb_word_index()
reverse_word_index <- names(word_index)
decoded_review <- sapply(train_data[[1]], function(index){ ## train_data의 첫번째 자료만 decode한거임
word <- if (index > 3) reverse_word_index[[index - 3]]
if (!is.null(word)) word else "?"
})
## 2. preparing the data - turn the lists into tensors
### 방법: One-hot-encoding: turn the lists into vectors of 0s and 1s.
vectorize_sequences <- function(sequences, dimension = 10000) {
# Create an all-zero matrix of shape (len(sequences), dimension)
results <- matrix(0, nrow = length(sequences), ncol = dimension)
for (i in 1:length(sequences)) {
# sets specific indices of results[i] to 1s
valid_indices <- sequences[[i]][sequences[[i]] > 2] # 0, 1, 2 빼고 나머지만 1로 바꿈
results[i, valid_indices] <- 1
}
results
}
x_train <- vectorize_sequences(train_data)
x_test <- vectorize_sequences(test_data)
### Vectorizing labels
y_train <- as.numeric(train_labels)
y_test <- as.numeric(test_labels)
## 3-1. Build a network (relu, sigmoid)
model_sigmoid <- keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = c(10000)) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dense(units = 1, activation = "sigmoid")
### configure model with the rmsprop optimizer, loss function: binary_crossentropy, monitor accuracy during training
model_sigmoid %>% compile(
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("accuracy")
)
### Making validation set (총 25000행에서 1~10000행 뜯어냄)
val_indices <- 1:10000
x_val <- x_train[val_indices,]
partial_x_train <- x_train[-val_indices,]
y_val <- y_train[val_indices]
partial_y_train <- y_train[-val_indices]
### epoch = 20, batch size = 512로 train하기 (loss monitoring 함)
model_sigmoid %>% fit(x_train, y_train, epochs = 20, batch_size = 512, validation_data = list(x_val, y_val))
str(history)
plot(history)
history
str(fit.history)
str(model_sigmoid)
rm(model_sigmoid)
### train the network for epoch = 20, batch size = 512로 train하기 (loss monitoring 함)
history <- model_sigmoid %>% fit(
partial_x_train,
partial_y_train,
epochs = 20,
batch_size = 512,
validation_data = list(x_val, y_val)
)
## 3-1. Build a network (relu, sigmoid)
model_sigmoid <- keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = c(10000)) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dense(units = 1, activation = "sigmoid")
### configure model with the rmsprop optimizer, loss function: binary_crossentropy, monitor accuracy during training
model_sigmoid %>% compile(
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("accuracy")
)
### Making validation set (총 25000행에서 1~10000행 뜯어냄)
val_indices <- 1:10000
### train the network for epoch = 20, batch size = 512로 train하기 (loss monitoring 함)
history <- model_sigmoid %>% fit(
partial_x_train,
partial_y_train,
epochs = 20,
batch_size = 512,
validation_data = list(x_val, y_val)
)
str(history)
plot(history)
### reset the model and train with epoch = 4
model_sigmoid <- keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = c(10000)) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dense(units = 1, activation = "sigmoid")
model_sigmoid %>% compile(
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("accuracy")
)
model_sigmoid %>% fit(x_train, y_train, epoch = 4, batch_size = 512)
results <- model_sigmoid %>% evaluate(x_test, y_test)
results
### reset the model and train with epoch = 4
model_sigmoid <- keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = c(10000)) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dense(units = 1, activation = "sigmoid")
model_sigmoid %>% compile(
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("accuracy")
)
model_sigmoid %>% fit(x_train, y_train, epoch = 5, batch_size = 512)
results <- model_sigmoid %>% evaluate(x_test, y_test)
results #accuracy: 87%.. 95%가 좋다.
model_sigmoid %>% predict(x_test[1:10,])
imdb <- dataset_imdb(num_words = 10000) #top 10000 most frequently occurring words(discard rare words)
###_data 리스트에는 각 element에 정수들의 리스트가 저장되어있는데, 이 정수들은 각 단어의 빈도순위를 나타냄
### 즉, 예를 들어 train_data[[1]] = int [1:218] 1 14 22 16 ... 이렇게 저장된 정수들은 각 리뷰에서 단어가 얼마나 등장했는지 빈도순위임
### 그래서 num_words = 10000은 10000위 밖의 단어(즉, 자주 쓰이지 않는 단어)들을 버리는 키워드임
c(c(train_data, train_labels), c(test_data, test_labels)) %<-% imdb #_data: list of reviews; _labels: list of 0(negative) and 1(positive)
## 2. preparing the data - turn the lists into tensors
### 방법: One-hot-encoding: turn the lists into vectors of 0s and 1s.
vectorize_sequences <- function(sequences, dimension = 10000) {
# Create an all-zero matrix of shape (len(sequences), dimension)
results <- matrix(0, nrow = length(sequences), ncol = dimension)
for (i in 1:length(sequences)) {
# sets specific indices of results[i] to 1s
valid_indices <- sequences[[i]][sequences[[i]] > 2] # 0, 1, 2 빼고 나머지만 1로 바꿈
results[i, valid_indices] <- 1
}
results
}
x_train <- vectorize_sequences(train_data)
x_test <- vectorize_sequences(test_data)
### Vectorizing labels
y_train <- as.numeric(train_labels)
y_test <- as.numeric(test_labels)
## 3-1. Build a network (relu, sigmoid)
model_sigmoid <- keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = c(10000)) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dense(units = 1, activation = "sigmoid")
### configure model with the rmsprop optimizer, loss function: binary_crossentropy, monitor accuracy during training
model_sigmoid %>% compile(
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("accuracy")
)
### Making validation set (총 25000행에서 1~10000행 뜯어냄)
val_indices <- 1:10000
x_val <- x_train[val_indices,]
partial_x_train <- x_train[-val_indices,]
y_val <- y_train[val_indices]
partial_y_train <- y_train[-val_indices]
### train the network for epoch = 20, batch size = 512로 train하기 (loss monitoring 함)
history <- model_sigmoid %>% fit(
partial_x_train,
partial_y_train,
epochs = 20,
batch_size = 512,
validation_data = list(x_val, y_val)
)
plot(history)
### reset the model and train with epoch = 4
model_sigmoid <- keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = c(10000)) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dense(units = 1, activation = "sigmoid")
model_sigmoid %>% compile(
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("accuracy")
)
model_sigmoid %>% fit(x_train, y_train, epoch = 4, batch_size = 512)
results <- model_sigmoid %>% evaluate(x_test, y_test)
results #accuracy: 87%.. 95%가 좋다.
model_sigmoid %>% predict(x_test[1:10,])
model_softmax <- keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = c(10000)) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dense(units = 1, activation = "softmax")
model_softmax %>% compile(
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("accuracy")
)
### train the network for epoch = 20, batch size = 512로 train하기 (loss monitoring 함)
history_2 <- model_softmax %>% fit(
partial_x_train,
partial_y_train,
epochs = 20,
batch_size = 512,
validation_data = list(x_val, y_val)
)
plot(history2)
plot(history_2)
imdb <- dataset_imdb(num_words = 10000) #top 10000 most frequently occurring words(discard rare words)
###_data 리스트에는 각 element에 정수들의 리스트가 저장되어있는데, 이 정수들은 각 단어의 빈도순위를 나타냄
### 즉, 예를 들어 train_data[[1]] = int [1:218] 1 14 22 16 ... 이렇게 저장된 정수들은 각 리뷰에서 단어가 얼마나 등장했는지 빈도순위임
### 그래서 num_words = 10000은 10000위 밖의 단어(즉, 자주 쓰이지 않는 단어)들을 버리는 키워드임
c(c(train_data, train_labels), c(test_data, test_labels)) %<-% imdb #_data: list of reviews; _labels: list of 0(negative) and 1(positive)
## 2. preparing the data - turn the lists into tensors
### 방법: One-hot-encoding: turn the lists into vectors of 0s and 1s.
vectorize_sequences <- function(sequences, dimension = 10000) {
# Create an all-zero matrix of shape (len(sequences), dimension)
results <- matrix(0, nrow = length(sequences), ncol = dimension)
for (i in 1:length(sequences)) {
# sets specific indices of results[i] to 1s
valid_indices <- sequences[[i]][sequences[[i]] > 2] # 0, 1, 2 빼고 나머지만 1로 바꿈
results[i, valid_indices] <- 1
}
results
}
x_train <- vectorize_sequences(train_data)
x_test <- vectorize_sequences(test_data)
### Vectorizing labels
y_train <- as.numeric(train_labels)
y_test <- as.numeric(test_labels)
### Making validation set (총 25000행에서 1~10000행 뜯어냄)
val_indices <- 1:10000
x_val <- x_train[val_indices,]
partial_x_train <- x_train[-val_indices,]
y_val <- y_train[val_indices]
partial_y_train <- y_train[-val_indices]
#####################################################################################
## 3-2. Build a network2 (relu, softmax)
model_softmax <- keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = c(10000)) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dense(units = 1, activation = "softmax")
model_softmax %>% compile(
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("accuracy")
)
### train the network for epoch = 20, batch size = 512로 train하기 (loss monitoring 함)
history_2 <- model_softmax %>% fit(
partial_x_train,
partial_y_train,
epochs = 20,
batch_size = 512,
validation_data = list(x_val, y_val)
)
partial_x_train[[1]]
View(partial_x_train)
View(x_val)
train_data[[1]]
x_train[1,]
partial_x_train[1,]
x_val[1,]
plot(history_2)
#####################################################################################
## 3-2. Build a network2 (relu, softmax)
model_softmax <- keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = c(10000)) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dense(units = 1, activation = "softmax")
model_softmax %>% compile(
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("accuracy")
)
### train the network for epoch = 20, batch size = 512로 train하기 (loss monitoring 함)
history_2 <- model_softmax %>% fit(
partial_x_train,
partial_y_train,
epochs = 20,
batch_size = 512,
validation_data = list(x_val, y_val)
)
### reset the model and train with epoch = ???
model_softmax <- keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = c(10000)) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dense(units = 1, activation = "softmax")
model_softmax %>% compile(
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("accuracy")
)
model_softmax %>% fit(x_train, y_train, epoch = 4, batch_size = 512)
results_2 <- model_softmax %>% evaluate(x_test, y_test)
results_2
model_softmax %>% predict(x_test[1:10,])
###################################################################
#softmax - hidden layer = 4
model_softmax_4 <- keras_model_sequential() %>%
layer_dense(units = 16, activation = "relu", input_shape = c(10000)) %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dense(units = 1, activation = "softmax")
model_softmax_4 %>% compile(
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = c("accuracy")
)
history_3 <- model_softmax_4 %>% fit(
partial_x_train,
partial_y_train,
epochs = 20,
batch_size = 512,
validation_data = list(x_val, y_val)
)
