# 1. 자바스크립트 기본 문법
## 1. 변수 선언하기
### 1. `let`
```js
let color = 'pink';
console.log(color);  //콘솔에 color 변수 띄움
```
#### 하면 안되는 짓 
```js
let color = 'pink';
let color = 'black';
console.log(color); 
```
`let`은 변수를 선언하는 것이기 때문에 같은 변수 두 번 선언하면 에러난다. 
```js
let color = 'black';
color = 'blue';
console.log(color)
```
이러면 에러 안나고 안전하게 변수 내용을 바꿀 수 있음.

### 2. `const`
constant(상수) 선언함. 즉 한번 선언한 변수의 내용을 앞으로도 바꾸고 싶지 않을 때 사용
```js
const color = 'black';
color = 'blue';
console.log(color)
```
이러면 에러남
```
TypeError: Assignment to constant variable.
```
### 3. `var`
```js
var color = 'pink'
```
`var`은 그냥 쓰지 마. (문제있는 코드)

#### `let`과 `var`의 차이: 호이스팅
1. 역사
- `var`이 먼저 나옴.
- 2015년에 자바스크립트 업그레이드함(ES6): `let` 도입
2. 문제1: 호이스팅
- 호이스팅: 함수가 실행되기 전에 함수 안의 변수들을 범위의 최상단으로 끌어올리는 것
- 예시
	```js
	console.log(a)
	var a = 1
	```
	결과: undefined (다른 언어에서는 100% 에러난다)
- 이처럼 js에서는 호이스팅 시 변수의 선언과 초기화(undefined로)를 같이 시켜버림. 변수에 값을 할당하는 것은 `var a = 1` 줄에 가서야 함
3. 문제2: 전역변수와 지역변수의 구분이 명확하지 않음
- `var`은 함수만 지역변수로 호이스팅이 되고 그 외에 반복문이나 if문같은 경우 지역변수도 전역변수로 올려버린다.
- 예시: 함수
	```js
	var a = 2
	function foo () {
	  var b = 1
	}

	console.log(b)
	```
	결과: `ReferenceError: b is not defined`
- 예시: for문
	```js
	for(var i = 1; i < 5; i++){
	  console.log(i);
	}
	console.log(i);
	```
	결과: 1 2 3 4 5
	-> `i`는 지역변수이기 때문에 for 문을 벗어난 후 `console.log(i)`의 결과값으로 5가 나오면 안되고 Error가 떠야 맞는데 이 경우 `var`이 지역변수를 전역변수단으로 올려버렸기 때문에 값이 출력된다.
4. 문제3: `var`은 같은 이름의 변수를 여러번 선언한다.
- `let`이나 `const`의 경우 이러면 에러난다.
- `var`은 그렇지 않다.
	```js
	var a = 'red';
	var a = 1;
	console.log(a);
	```
	결과: 1 
	-> 이러면 안된다... 변수의 이름은 절대 중복되면 안된다ㅜ
5. `let`은 위 문제들을 해결함
- `let`도 호이스팅이 되긴 한다
- 그러나 호이스팅된 변수를 **Temporal Death Zone (TDZ)** 에 넣어서 변수가 실제로 선언된 코드에 접근하기 전까지는 앞의 코드에서 해당 변수를 사용할 수 없게 함.
- 예시
	```js
	console.log(a)
	let a = 1;
	console.log(a)
	```
	결과: `ReferenceError: Cannot access 'a' before initialization at Object.`

	
## 2. 자료형과 연산자
1. string: 문자열
	```js
	let password = '123'+1
	```
	결과: 1231

2. 숫자타입
- 주의
	```js
	let password = 2;
	password + 1; //password = password + 1이 옳다. 
	console.log(password)
	```
	결과: 2
	이유: `password+1`이 할당된 변수가 없기 때문에 계산이 끝나면 그 값은 그냥 소멸된다. 
- `%` 연산자: 나머지 계산 
- `**`: 제곱 

3. boolean: t/f
- 논리 연산자 `<`, `>`의 결과는 boolean으로 나옴 
- `||`: or
- `&&`: and
- `==`와 `===`의 차이
	- `==`, `!==`:  두 연산자의 자료형을 일치시킨 후 값 비교
	- `===`, `!==`: 두 연산자의 자료형을 변환하지 않고 값 비교. 따라서 값과 자료형 모두 같아야 true (false) 판정
	- 예시
	```js
	console.log('5'==5);
	console.log('5'===5);
	```
	결과: 차례대로 true, false. 
 
## 3. 배열
### 1. 배열
```js
//배열 만들기
let fruit = ['banana', 'apple', 'grape', 'mango']
console.log(fruit) //['banana', 'apple', 'grape', 'mango']
console.log(fruit[0]) //'banana'

//배열 값 바꾸기
fruit[0] = 'cherry'
console.log(fruit) //['cherry', 'apple', 'grape', 'mango']
```

### 2. 배열과 같이 쓸 수 있는 함수
1. pop(): 마지막에 있는 아이템을 뺌
	```js
	fruit.pop()
	console.log(fruit) //['cherry', 'apple', 'grape']
	```
	-> 'mango'가 빠짐

2. push(): 마지막에 아이템 추가
	```js
	fruit.push('pineapple')
	console.log(fruit) //['cherry', 'apple', 'grape', 'pineapple']
	```
	마지막에 'pineapple' 추가
3. includes(): 해당 아이템을 배열이 포함하고 있는지 알려줌
	```js
	console.log(fruit.includes('apple')) //true
	console.log(fruit.includes('pear')) //false
	```
4. indexOf(): 아이템의 인덱스를 찾아줌
	```js
	console.log(fruit.indexOf('grape')) // 2
	```
5. slice(), splice(): 배열을 자르는 함수
	fruit = ['cherry', 'apple', 'grape', 'pineapple']
	1. slice(_a_): [_a_] 부터 마지막 인덱스까지 배열을 잘라냄  
		```js
		console.log(fruit.slice(1))
		```
		결과: ['apple', 'grape', 'pineapple'] => 인덱스 [1]부터 마지막까지 잘라냄. 
	2. slice(_a_, _b_): [_a_]부터 [_b_] 전까지 배열을 잘라냄
		```js
		console.log(fruit.slice(1,3))
		```
		결과: ['apple', 'grape'] => [1], [2]가 잘림
	3. splice(_a_, _b_): 배열에서 [_a_]부터 _b_ 개의 아이템을 잘라낸다.  (_b_ 입력 안한 경우 [_a_] 부터 마지막까지 삭제) 
		 ```js
		 console.log(fruit.splice(1,2)) // ['apple', 'grape']
		 console.log(fruit) // ['cherry', 'pineapple']
		 ```
		 배열에서 아이템이 아예 삭제됨
#### slice()와 splice()의 차이
- slice(): 기존 배열을 건드리지 않고, 새로운 배열을 만든다.
- splice(): 기존 배열을 건드린다 (기존 배열이 변경됨_잘림)


## 4. 객체
### 1. 객체란
관련 정보를 하나로 묶어서 볼 수 있게 함.
```js
// 객체 만들기
let patient = {
  name : 'jimin', //키 : 값
  age : 17,
  disease : 'cold'
}
console.log(patient)

// 객체 안의 특정 정보만 보기 (2가지 방법)
console.log(patient.name)
console.log(patient['name'])

// 객체 내용 바꾸기 (2가지 방법)
patient.name = 'jk'
patient['age'] = 25
```
### 2. 배열 안에 객체 넣기
```js
// 배열 안에 객체 넣기
let PatientList = [
  {
    name : 'jk',
    age : 13
  },
  {
    name : 'jin',
    age : 30
  },
  {
    name : 'jhope',
    age : 40
  }
]
console.log(PatientList)

// 배열의 첫번째 객체 프린트
console.log(PatientList[0])

// 배열의 첫번째 객체의 'name' 프린트 (2가지 방법)
console.log(PatientList[0].name) 
console.log(PatientList[0]['name']) // 결과: jk
```
#### 객체 지향형 프로그래밍 (Object Oriented Programming)?


## 5. if문
### 1. if문 
```js
if (조건문1) {
  조건문1이 참일때 실행
} else if (조건문2) {
  조건문1이 거짓 && 조건문2가 참일때 실행
} else {
  조건문1, 2가 모두 거짓일 때 실행
}
```
### 2. 중첩 if문
if문 안에 if문이 들어있음
```js
let age = 21
let licence = true

if (age > 20) {
  if (licence = true) {
    console.log('운전 가능')
  } else {
    console.log('운전 불가')
  }
} else {
  console.log('운전 불가')
}
```
결과: 운전 가능
#### switch문과 삼항 연산식
 1. switch문 
if문에 비해 제한(범위조건 불가)이 있으나 사용하기 간편하다. 하지만 요즘은 잘 안쓰는 추세임
	```js
	let menu = prompt('메뉴입력')

	switch (menu) {
	  case 'Udong':
	    console.log('5000원')
	    break;
	  case 'ramen':
	    console.log('4500원')
	    break;
	  case 'ricecake':
	    console.log('3500원')
	    break;
	  default:
	    console.log('그런건 안팔아!')
	}
	```
2. 삼항 연산식
조건이 많지 않고, 반환하고 싶은 값이 딱 하나만 있을 때 사용함. 많이 사용됨.   
`조건? true일때 반환값 : false일때 반환값`
	```js
	let number = 4
	let answer = number <= 3? '3보다 작다' : '3보다 크다'
	console.log(answer) // 결과: 3보다 크다
	```

## 6. 반복문
### 1. for문
#### 짝수만 프린트하는 코드
1. if로 조건 검사
	```js
	for (let i = 0; i <= 10; i++ ) {
	  if (i%2 == 0) {
	    console.log(i)
	  }
	}
	```
	루프를 10번 도는데다가 조건검사까지 하기 때문에 비효율적임

2. i에 2씩 더하기
	```js
	for (let i = 0; i <= 10; i+=2) {
	  console.log(i)
	}
	```
	코드도 짧고 루프도 5번만 돌기 때문에 효율적
#### 구구단
```js
for (let i = 2; i <= 9; i++) {
  for (let j = 1; j < 10; j++) {
    console.log(i,' x ', j, ' = ', i*j)
  }
}
```
#### 배열과 for문
```js
let fruit = ['banana', 'apple', 'grape', 'mango']
for (let i = 0; i < fruit.length; i++) {
  console.log(fruit[i])
}
```
### 2. while문
```js
while (true) {
	console.log('while문 실행')
}
```
### 3. 퀴즈
#### 1부터 100까지 더하는 for문 
```js
let j = 0
for (let i = 1; i <= 100; i++) {
  j = j + i
}
console.log(j)
```
#### 1부터 100까지 홀수만 출력
```js
for (let i = 1; i <= 100; i+=2) {
  console.log(i)
}
```
#### 1부터 50까지 369 결과 프린트
```js
//내 풀이 time: 6.933ms
for (let i = 1; i <= 50; i++) {
  let units = i%10
  let tens = (i-units)/10
  let foo = [3, 6, 9]
  if (foo.includes(units) && foo.includes(tens)) {
    console.log('짝짝')
  } else if (foo.includes(units) || foo.includes(tens)){
    console.log('짝')
  } else (
    console.log(i)
  )
}

// 답안 time: 7.198ms
for (let i = 1; i <=50; i++) {
  let StringValue = i.toString()
  let result = ''
  for (let j = 0; j < StringValue.length; j++) {
    if (StringValue[j] == '3' || StringValue[j] == '6' || StringValue[j] == '9') {
      result+='짝'
    }
  }
  console.log(result.length>0? result : i)
}

```
#### 소수판별기 (소수면 true, 아니면 false)
```js
//내 답
let number = prompt('숫자입력')
sqrt = Math.sqrt(Number(number))

for(let i = 2; i <= sqrt; i++) {
  if (number%i == 0) {
    console.log('false')
    return
  } else {
    continue
  }
}
console.log('true')
```
```js
//답안
let n = prompt('숫자입력')
let isPrime = true

for(let i = 2; i < n; i++) {
  if (n%i == 0) {
    isPrime = false
  }
}
console.log(isPrime)
```

## 7. 함수
```js
function makeBurger (type, size, num) {
  console.log('매개변수:', type, size, num)
  console.log("빵두기")
  console.log('상추두기')
  console.log(type,'패티두기')
  console.log('빵덮기')
  console.log(type, '버거', size, '사이즈', num, '개 준비완료')
  return "완료되었습니다." //return 만나면 함수종료
}

let result = makeBurger('불고기', 'L', 5) // result에 return 값이 저장된다
console.log("버거 프로세스 결과", result) 
```
함수 안에 함수를 넣을 수 있다.
```js
function makeSet(){
	makeBurger("새우", "M", 3)
	servefrenchFries()
	serveCoke()
}
makeSet()
```
#### 퀴즈
```js
// greet
function greet(name) {
  console.log('안녕 내 이름은', name, '야')
  return name
}

greet('제시카')

// meetAt - 백틱(`)과 템플릿 문자열
function meetAt(year, month, day) {
  if (arguments.length == 3) {
    return `${year}/${month}/${day}`
  } else if (arguments.length == 2) {
    return `${year}/${month}`
  } else {
    return `${year}년`
  }
}
console.log(meetAt(2002))

//findSmallestElements
function findSamllestElements(arr) {
  if (arr.length == 0) {
    return 0
  }
  let smallest = arr[0]
  for (let i = 0; i < arr.length-1; i++) {
    smallest > arr[i+1]? smallest = arr[i+1] : smallest
  }
  console.log(smallest)
}
findSamllestElements([100,200,3,0,2,1])

// 돈을 매개변수로 받으면 몇개의 지폐와 동전이 필요한지 최소 개수를 계산해주는 함수를 만드시오
function coin(money) {
  bills = [50000,10000,5000,1000,500,300]
  let remain = money
  for (let i = 0; i < bills.length; i++){
    console.log(bills[i],'X',parseInt(remain/bills[i]))
    remain = remain%bills[i]
  }
}

coin(12300)
```

	
